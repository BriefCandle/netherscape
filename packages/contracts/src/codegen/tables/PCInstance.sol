// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("netherscape"), bytes16("PCInstance")));
bytes32 constant PCInstanceTableId = _tableId;

struct PCInstanceData {
  bytes32 pcClassID;
  uint16 maxHP;
  uint16 atk;
  uint16 spd;
  uint16 maxPP;
  uint16 currentHP;
  uint256 blockStarts;
  bytes32[2] attackIDs;
}

library PCInstance {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.UINT16;
    _schema[2] = SchemaType.UINT16;
    _schema[3] = SchemaType.UINT16;
    _schema[4] = SchemaType.UINT16;
    _schema[5] = SchemaType.UINT16;
    _schema[6] = SchemaType.UINT256;
    _schema[7] = SchemaType.BYTES32_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](8);
    _fieldNames[0] = "pcClassID";
    _fieldNames[1] = "maxHP";
    _fieldNames[2] = "atk";
    _fieldNames[3] = "spd";
    _fieldNames[4] = "maxPP";
    _fieldNames[5] = "currentHP";
    _fieldNames[6] = "blockStarts";
    _fieldNames[7] = "attackIDs";
    return ("PCInstance", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get pcClassID */
  function getPcClassID(bytes32 key) internal view returns (bytes32 pcClassID) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get pcClassID (using the specified store) */
  function getPcClassID(IStore _store, bytes32 key) internal view returns (bytes32 pcClassID) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set pcClassID */
  function setPcClassID(bytes32 key, bytes32 pcClassID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((pcClassID)));
  }

  /** Set pcClassID (using the specified store) */
  function setPcClassID(IStore _store, bytes32 key, bytes32 pcClassID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((pcClassID)));
  }

  /** Get maxHP */
  function getMaxHP(bytes32 key) internal view returns (uint16 maxHP) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get maxHP (using the specified store) */
  function getMaxHP(IStore _store, bytes32 key) internal view returns (uint16 maxHP) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set maxHP */
  function setMaxHP(bytes32 key, uint16 maxHP) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((maxHP)));
  }

  /** Set maxHP (using the specified store) */
  function setMaxHP(IStore _store, bytes32 key, uint16 maxHP) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((maxHP)));
  }

  /** Get atk */
  function getAtk(bytes32 key) internal view returns (uint16 atk) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get atk (using the specified store) */
  function getAtk(IStore _store, bytes32 key) internal view returns (uint16 atk) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set atk */
  function setAtk(bytes32 key, uint16 atk) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((atk)));
  }

  /** Set atk (using the specified store) */
  function setAtk(IStore _store, bytes32 key, uint16 atk) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((atk)));
  }

  /** Get spd */
  function getSpd(bytes32 key) internal view returns (uint16 spd) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get spd (using the specified store) */
  function getSpd(IStore _store, bytes32 key) internal view returns (uint16 spd) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set spd */
  function setSpd(bytes32 key, uint16 spd) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((spd)));
  }

  /** Set spd (using the specified store) */
  function setSpd(IStore _store, bytes32 key, uint16 spd) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((spd)));
  }

  /** Get maxPP */
  function getMaxPP(bytes32 key) internal view returns (uint16 maxPP) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get maxPP (using the specified store) */
  function getMaxPP(IStore _store, bytes32 key) internal view returns (uint16 maxPP) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set maxPP */
  function setMaxPP(bytes32 key, uint16 maxPP) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((maxPP)));
  }

  /** Set maxPP (using the specified store) */
  function setMaxPP(IStore _store, bytes32 key, uint16 maxPP) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((maxPP)));
  }

  /** Get currentHP */
  function getCurrentHP(bytes32 key) internal view returns (uint16 currentHP) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get currentHP (using the specified store) */
  function getCurrentHP(IStore _store, bytes32 key) internal view returns (uint16 currentHP) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set currentHP */
  function setCurrentHP(bytes32 key, uint16 currentHP) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((currentHP)));
  }

  /** Set currentHP (using the specified store) */
  function setCurrentHP(IStore _store, bytes32 key, uint16 currentHP) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((currentHP)));
  }

  /** Get blockStarts */
  function getBlockStarts(bytes32 key) internal view returns (uint256 blockStarts) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get blockStarts (using the specified store) */
  function getBlockStarts(IStore _store, bytes32 key) internal view returns (uint256 blockStarts) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set blockStarts */
  function setBlockStarts(bytes32 key, uint256 blockStarts) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((blockStarts)));
  }

  /** Set blockStarts (using the specified store) */
  function setBlockStarts(IStore _store, bytes32 key, uint256 blockStarts) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((blockStarts)));
  }

  /** Get attackIDs */
  function getAttackIDs(bytes32 key) internal view returns (bytes32[2] memory attackIDs) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return toStaticArray_bytes32_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get attackIDs (using the specified store) */
  function getAttackIDs(IStore _store, bytes32 key) internal view returns (bytes32[2] memory attackIDs) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return toStaticArray_bytes32_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set attackIDs */
  function setAttackIDs(bytes32 key, bytes32[2] memory attackIDs) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 7, EncodeArray.encode(fromStaticArray_bytes32_2(attackIDs)));
  }

  /** Set attackIDs (using the specified store) */
  function setAttackIDs(IStore _store, bytes32 key, bytes32[2] memory attackIDs) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 7, EncodeArray.encode(fromStaticArray_bytes32_2(attackIDs)));
  }

  /** Get the length of attackIDs */
  function lengthAttackIDs(bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 7, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of attackIDs (using the specified store) */
  function lengthAttackIDs(IStore _store, bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 7, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of attackIDs (unchecked, returns invalid data if index overflows) */
  function getItemAttackIDs(bytes32 key, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 7, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get an item of attackIDs (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemAttackIDs(IStore _store, bytes32 key, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 7, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Push an element to attackIDs */
  function pushAttackIDs(bytes32 key, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.pushToField(_tableId, _keyTuple, 7, abi.encodePacked((_element)));
  }

  /** Push an element to attackIDs (using the specified store) */
  function pushAttackIDs(IStore _store, bytes32 key, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.pushToField(_tableId, _keyTuple, 7, abi.encodePacked((_element)));
  }

  /** Pop an element from attackIDs */
  function popAttackIDs(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.popFromField(_tableId, _keyTuple, 7, 32);
  }

  /** Pop an element from attackIDs (using the specified store) */
  function popAttackIDs(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.popFromField(_tableId, _keyTuple, 7, 32);
  }

  /** Update an element of attackIDs at `_index` */
  function updateAttackIDs(bytes32 key, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.updateInField(_tableId, _keyTuple, 7, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of attackIDs (using the specified store) at `_index` */
  function updateAttackIDs(IStore _store, bytes32 key, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.updateInField(_tableId, _keyTuple, 7, _index * 32, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (PCInstanceData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (PCInstanceData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    bytes32 pcClassID,
    uint16 maxHP,
    uint16 atk,
    uint16 spd,
    uint16 maxPP,
    uint16 currentHP,
    uint256 blockStarts,
    bytes32[2] memory attackIDs
  ) internal {
    bytes memory _data = encode(pcClassID, maxHP, atk, spd, maxPP, currentHP, blockStarts, attackIDs);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    bytes32 pcClassID,
    uint16 maxHP,
    uint16 atk,
    uint16 spd,
    uint16 maxPP,
    uint16 currentHP,
    uint256 blockStarts,
    bytes32[2] memory attackIDs
  ) internal {
    bytes memory _data = encode(pcClassID, maxHP, atk, spd, maxPP, currentHP, blockStarts, attackIDs);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, PCInstanceData memory _table) internal {
    set(
      key,
      _table.pcClassID,
      _table.maxHP,
      _table.atk,
      _table.spd,
      _table.maxPP,
      _table.currentHP,
      _table.blockStarts,
      _table.attackIDs
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, PCInstanceData memory _table) internal {
    set(
      _store,
      key,
      _table.pcClassID,
      _table.maxHP,
      _table.atk,
      _table.spd,
      _table.maxPP,
      _table.currentHP,
      _table.blockStarts,
      _table.attackIDs
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (PCInstanceData memory _table) {
    // 74 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 74));

    _table.pcClassID = (Bytes.slice32(_blob, 0));

    _table.maxHP = (uint16(Bytes.slice2(_blob, 32)));

    _table.atk = (uint16(Bytes.slice2(_blob, 34)));

    _table.spd = (uint16(Bytes.slice2(_blob, 36)));

    _table.maxPP = (uint16(Bytes.slice2(_blob, 38)));

    _table.currentHP = (uint16(Bytes.slice2(_blob, 40)));

    _table.blockStarts = (uint256(Bytes.slice32(_blob, 42)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 74) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 106;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.attackIDs = toStaticArray_bytes32_2(SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes32 pcClassID,
    uint16 maxHP,
    uint16 atk,
    uint16 spd,
    uint16 maxPP,
    uint16 currentHP,
    uint256 blockStarts,
    bytes32[2] memory attackIDs
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(attackIDs.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        pcClassID,
        maxHP,
        atk,
        spd,
        maxPP,
        currentHP,
        blockStarts,
        _encodedLengths.unwrap(),
        EncodeArray.encode(fromStaticArray_bytes32_2(attackIDs))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function toStaticArray_bytes32_2(bytes32[] memory _value) pure returns (bytes32[2] memory _result) {
  // in memory static arrays are just dynamic arrays without the length byte
  assembly {
    _result := add(_value, 0x20)
  }
}

function fromStaticArray_bytes32_2(bytes32[2] memory _value) view returns (bytes32[] memory _result) {
  _result = new bytes32[](2);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 64);
}
